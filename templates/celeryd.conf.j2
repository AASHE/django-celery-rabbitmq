; ==================================
;  celery worker for supervisor
; ==================================

[program:{{app_name}}-celery]

environment={% for k, v in app_env_vars.iteritems() %}{% if not loop.first %},{% endif %}{{ k }}="{{ v }}"{% endfor %}

; Set full path to celery program if using virtualenv
;command={{app_env_dir}}/bin/celery worker -A {{app_name}} --loglevel=INFO
;command={{app_env_dir}}/bin/celery worker --loglevel=INFO
command={{app_env_dir}}/bin/python manage.py celery worker --loglevel=INFO

directory={{app_code_dir}}
user={{app_user}}
numprocs=1
stdout_logfile={{app_log_dir}}/celery.log
stderr_logfile={{app_log_dir}}/celery.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998
